import subprocess
import datetime
import argparse
import os
import sys
import shutil
import filecmp

# Build script version
SCRIPT_VERSION = 1.1

# Script version 1.0 included the time of day in the build version header file
# Script version 1.1 no longer does that, and also avoids touching the build version header file if it wouldn't change so the compiler doesn't recompile everything

parser = argparse.ArgumentParser(description='Generate version information as a pre-build compile step')
parser.add_argument('--output', dest='output', action='store', help='Path of output version file', default='build_version.h')
parser.add_argument('--prefix', dest='prefix', action='store', help='Version define prefix', default='')

args = parser.parse_args()

# Read the Git hash (short)
commit = str(subprocess.check_output("git rev-parse --short HEAD".split()), 'utf-8').strip()

# Read the current branch name
branch = str(subprocess.check_output("git rev-parse --abbrev-ref HEAD".split()), 'utf-8').strip()

# Read the now
now = datetime.datetime.now()

prefix = args.prefix.upper()

header = prefix + "_BUILD_VERSION_H_"

output_path = args.output.replace("/", "\\")

output_dir = os.path.dirname(output_path)
output_file = os.path.basename(output_path)
output_file_temp = output_file + ".temp"

if not os.path.exists(output_dir):
    output_dir = os.path.join(os.getcwd(), output_dir)

if not os.path.exists(output_dir):
    print("Output directory '" + str(output_dir) + "' does not exist.")
    sys.exit(1)

output_path = os.path.join(output_dir, output_file)
output_path_temp = os.path.join(output_dir, output_file_temp)

if prefix and not prefix.endswith("_"):
    prefix += "_"
    
# Write the external file
with open(output_path_temp, 'w') as output:

    output.write("#ifndef " + header + "\n")
    output.write("#define " + header + "\n\n")

    output.write("/* This file is autogenerated as a pre-build compiler step\n")
    output.write(" * (do not overwrite)\n")
    output.write(" * \n")
    #output.write(" * File generated at : " + str(now) + "\n")
    output.write(" * File generated at : " + str(now.date()) + "\n")
    output.write(" * Build script version: " + str(SCRIPT_VERSION) + "\n\n")
    output.write(" */\n\n")

    output.write("#define " + prefix + "BUILD_YEAR " + str(now.year) + "\n")
    output.write("#define " + prefix + "BUILD_MONTH " + str(now.month) + "\n")
    output.write("#define " + prefix + "BUILD_DAY " + str(now.day) + "\n")

    output.write("\n")

    #output.write('#define ' + prefix + 'BUILD_TIME "' +
    #             str(now.hour) + ":" +
    #             str(now.minute) + ":" +
    #             str(now.second) + '"\n')
    #output.write("\n")

    # Git commit hash
    output.write('#define ' + prefix + 'BUILD_COMMIT_HASH "' +
                 str(commit) + '"\n\n')

    # Git branch name
    output.write('#define ' + prefix + 'BUILD_GIT_BRANCH "' +
                 str(branch) + '"\n\n')

    output.write("#endif  // " + header + "\n\n")
    
# If the output file does not exist, or changes have been made
if not os.path.exists(output_path) or not filecmp.cmp(output_path_temp, output_path, shallow=False):
    print("Updating build version file!")
    shutil.copyfile(output_path_temp, output_path)
    
os.remove(output_path_temp)

# Done
print("Generated build version file: " + output_path)
sys.exit(0)
